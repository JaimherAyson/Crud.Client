@page "/items"
@inject IHttpClientFactory HttpClientFactory
@inject HttpClient Http

<h3>Items</h3>

@if (items == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Quantity</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in items)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>@item.Quantity</td>
                    <td>
                        <button @onclick="() => EditItem(item)">Edit</button>
                        <button @onclick="() => DeleteItem(item.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<button @onclick="ShowAddForm">Add Item</button>

@if (showForm)
{
    <div>
        <input id="itemName" name="itemName" @bind="editItem.Name" placeholder="Name" />
        <input id="itemQuantity" name="itemQuantity" @bind="editItem.Quantity" placeholder="Quantity" type="number" />

        <button @onclick="SaveItem">Save</button>
        <button @onclick="CancelEdit">Cancel</button>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red;">Error: @errorMessage</p>
}

@code {
    private List<Item>? items;
    private Item editItem = new();
    private bool showForm = false;
    private string? errorMessage;
    private HttpClient? httpClient;

    protected override async Task OnInitializedAsync()
    {
        httpClient = HttpClientFactory.CreateClient("API");
        await LoadItems();
    }

    private async Task LoadItems()
    {
        try
        {
            items = await httpClient.GetFromJsonAsync<List<Item>>("api/items");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching items: {ex.Message}";
        }
    }

    private void ShowAddForm()
    {
        showForm = true;
        editItem = new();
    }

    private void EditItem(Item item)
    {
        editItem = new Item
            {
                Id = item.Id,
                Name = item.Name,
                Quantity = item.Quantity
            };
        showForm = true;
    }

    private async Task SaveItem()
    {
        try
        {
            if (string.IsNullOrEmpty(editItem.Id))
            {
                var response = await httpClient.PostAsJsonAsync("api/items", editItem);
                response.EnsureSuccessStatusCode();
            }
            else
            {
                var response = await httpClient.PutAsJsonAsync($"api/items/{editItem.Id}", editItem);
                response.EnsureSuccessStatusCode();
            }

            await LoadItems();
            showForm = false;
            editItem = new();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving item: {ex.Message}";
        }
    }

    private async Task DeleteItem(string id)
    {
        try
        {
            var response = await httpClient.DeleteAsync($"api/items/{id}");
            response.EnsureSuccessStatusCode();
            await LoadItems();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting item: {ex.Message}";
        }
    }

    private void CancelEdit()
    {
        showForm = false;
        editItem = new();
    }
}
